{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOcH9LnWWn/4gGtnvBuLOqc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DaryllBautista/Emtech/blob/main/main_app_py.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZpxI9jdKqPbl"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import subprocess\n",
        "\n",
        "# Set page layout\n",
        "st.set_page_config(\n",
        "    page_title=\"Happy or Sad Classification\",\n",
        "    page_icon=\":smiley:\",\n",
        "    layout=\"wide\"\n",
        ")\n",
        "\n",
        "# Add a title with a custom font and color\n",
        "st.title(\"Happy or Sad Classification\")\n",
        "st.markdown(\n",
        "    \"\"\"\n",
        "    <style>\n",
        "        .big-font {\n",
        "            font-size: 24px !important;\n",
        "            color: #3498db !important;\n",
        "        }\n",
        "        .highlight {\n",
        "            background-color: #3498db;\n",
        "            padding: 10px;\n",
        "            border-radius: 10px;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        .result {\n",
        "            background-color: #3498db;\n",
        "            padding: 10px;\n",
        "            border-radius: 10px;\n",
        "            margin-top: 15px;\n",
        "        }\n",
        "        .result-text {\n",
        "            color: #ffffff !important;\n",
        "        }\n",
        "        .white-text {\n",
        "            color: #ffffff !important;\n",
        "        }\n",
        "        .footer-text {\n",
        "            color: #ffffff !important;\n",
        "            font-style: italic;\n",
        "        }\n",
        "    </style>\n",
        "    \"\"\",\n",
        "    unsafe_allow_html=True\n",
        ")\n",
        "\n",
        "# Text to display\n",
        "made_by_text = \"This was made by:\"\n",
        "submitted_to_text = \"Submitted to Engr Roman Richard.\"\n",
        "\n",
        "# Display \"This was made by:\" with a blue background and white text\n",
        "st.markdown(f'<div class=\"highlight\"><p class=\"big-font white-text\">{made_by_text}</p></div>', unsafe_allow_html=True)\n",
        "\n",
        "# Names to display\n",
        "names = [\"Bautista, Daryll Milton Victor E.\", \"Tavares, Nicole Ann\"]\n",
        "\n",
        "# Display names with a blue background and white text\n",
        "for name in names:\n",
        "    st.markdown(f'<p class=\"big-font white-text\">{name}</p>', unsafe_allow_html=True)\n",
        "\n",
        "# Display \"Submitted to Dr. Jonathan Taylar.\" with a blue background and white text\n",
        "st.markdown(f'<p class=\"big-font white-text\">{submitted_to_text}</p>', unsafe_allow_html=True)\n",
        "\n",
        "# File uploader widget to upload an image file\n",
        "uploaded_file = st.file_uploader(\"Choose an image...\", type=\"jpg\")\n",
        "\n",
        "# Function to perform image classification using TensorFlow\n",
        "def classify_image(image):\n",
        "    try:\n",
        "        # Load the trained model (replace with your own model)\n",
        "        model = tf.keras.models.load_model(\"best_modelnew.h5\")\n",
        "\n",
        "        # Compile the model\n",
        "        optimizer = tf.optimizers.Adam(learning_rate=0.001)\n",
        "        model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "        # Preprocess the image\n",
        "        img_array = np.array(image)\n",
        "        img_array = tf.image.resize(img_array, (64, 64))  # Resize the image to match model's expected input size\n",
        "        img_array = tf.expand_dims(img_array, 0)  # Add a batch dimension\n",
        "        img_array = img_array / 255.0  # Normalize the input image\n",
        "\n",
        "        # Make predictions\n",
        "        predictions = model.predict(img_array)\n",
        "\n",
        "        return predictions\n",
        "\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error during image classification: {e}\")\n",
        "        return None\n",
        "\n",
        "# Display the uploaded image and perform classification\n",
        "if uploaded_file is not None:\n",
        "    image = Image.open(uploaded_file)\n",
        "\n",
        "    # Add a header with a blue background and white text\n",
        "    st.markdown('<div class=\"highlight\"><p class=\"big-font white-text\">Uploaded Image</p></div>', unsafe_allow_html=True)\n",
        "\n",
        "    # Display the image\n",
        "    st.image(image, use_column_width=True)\n",
        "\n",
        "    # Call the classification function\n",
        "    predictions = classify_image(image)\n",
        "\n",
        "    if predictions is not None:\n",
        "        # Display the classification results with a blue background\n",
        "        st.markdown('<div class=\"result\"><p class=\"big-font result-text\">Prediction Results</p></div>', unsafe_allow_html=True)\n",
        "\n",
        "        # Print raw predictions for debugging\n",
        "        st.write(\"Raw Predictions:\", predictions)\n",
        "\n",
        "        # Extracting class labels\n",
        "        class_labels = [\"Sad\", \"Happy\"]\n",
        "\n",
        "        # Finding the predicted class\n",
        "        predicted_class_index = np.argmax(predictions[0])\n",
        "        predicted_class_label = class_labels[predicted_class_index]\n",
        "\n",
        "        # Display the result with white text on a blue background\n",
        "        st.markdown(f'The model predicts: <span class=\"big-font result-text\">{predicted_class_label}</span>', unsafe_allow_html=True)\n",
        "\n",
        "# Link to open the app in Colab\n",
        "colab_link = \"<a href=\\\"https://colab.research.google.com/github/DaryllBautista/Emtech/blob/main/final_requirement_streamlit.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n",
        "st.markdown(colab_link, unsafe_allow_html=True)\n",
        "\n",
        "# Run Streamlit app in the background\n",
        "streamlit_command = \"streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\"\n",
        "subprocess.Popen(streamlit_command, shell=True)"
      ]
    }
  ]
}